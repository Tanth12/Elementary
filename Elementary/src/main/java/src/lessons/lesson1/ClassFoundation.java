package src.lessons.lesson1;

import java.io.IOException;

/**
 * Урок первый, структура класса, модификаторы доступа
 *
 * Класс - описание объекта, который будет создан
 *
 * По общим соглашениям сначала в классе объявляются поля класса, затем конструкторы, затем методы, затем внутренние классы
 *
 * Created by tanth on 08.07.17.
 */
public class ClassFoundation {

    /**
     * Объявление полей класса
     *
     * Поля - свойства, которые будут принадлежать созданному объекту
     *
     * Каждое поле выглядит как:
     * *различные модификаторы* *тип поля* *наименование поля*
     */

    /**
     * В данном поле:
     * transient static volatile public - модификаторы поля
     * int - обозначение типа поля
     * someIntName - наименование поля, по которому к нему будут обращаться
     */
    public transient static volatile int someIntName;


    /**
     * Модификаторы доступа отвечают за видимость переменной/конструктора/класса/метода
     * По общим соглашениям принято писать модификаторы доступа перед всеми остальными модификаторами
     *
     * Модификаторы доступа делятся на 4 группы:
     */

    /**
     * public - переменная или метод видны ото всюду
     *
     * Писать публичные переменные класса - моветон, т.к. это нарушает инкапсуляцию
     */
    public int publicInt;

    /**
     * package (пустота перед методом) - видна только внутри пакета
     */
    int packageInt;

    /**
     * protected - видна только внутри класса и наследников этого класса
     */
    protected int protectedInt;

    /**
     * private - видна только внутри класса
     * Для доступа к значениям private - полей используют методы-геттеры (от слова get-получить)
     * Для изменения private - полей используют методы-сеттеры (от слова set-задать)
     *
     * Для автоматического создания геттеров и сеттеров в Intellij Idea достаточно нажать alt+insert
     * и выбрать поле Getter and Setter, выбрав там интересующие поля
     */
    private int privateInt;

    /**
     * Полями класса могут являться как примитивы (int, double...)
     * так и объекты и массивы
     */
    private String someString;

    /**
     * Массив строк
     */
    private String[] someStringArray;

    /**
     * Все объекты в java обязаны наследоваться от класса Object
     */
    private Object someObject;

    //--------------------------Конец объявления полей класса-----------------------------------------------------------


    /**
     * Объявление конструкторов класса.
     *
     * Конструктор - набор действий, который будет выполнен в обязательном порядке, перед тем, как объект будет создан
     * Чаще всего в конструкторы передаются значения, которые должны будут
     * Как поля и методы, конструкторы так же имеют модификаторы доступа.
     * К примеру, если использовать приватный конструктор - то экземпляр класса нельзя будет создать нигде кроме
     * внутренностей своего класса. Такой подход, к примеру, используется в паттерне "Одиночка" (singleton)
     *
     * Для автоматического создания конструкторов в Intellij Idea достаточно нажать alt+insert
     * и выбрать поле Constructor, выбрав там интересующие поля
     */


    /**
     * Конструктор по-умолчанию. В случае полного отсутствия конструкторов в классе такой конструктор будет
     * создан автоматически, на процессе компиляции
     */
    public ClassFoundation(){

    }

    /**
     * Конструкторов может быть несколько, главное чтобы аргументы в них не были одинаковыми
     *
     * Как и метод в конструктор можно что-то передать, чтобы заранее определить некоторые поля объекта
     * @param inputString - строка, которая будет подставлена в поле someString в момент создания объекта
     * @param someObject - объект, который будет подставлен в поле someObject в момент создания объекта
     */
    public ClassFoundation(String inputString, Object someObject){
        //Подставляю строку inputString в поле someString
        someString = inputString;
        /* В случае конфликта имен (Как у нас сейчас someObject является как аргументом конструктора, так и полем класса)
        Всегда выбирается наиболее локальная переменная (к примеру, аргумент метода будет более конкретным в данной
        ситуации, в свою очередь, для обращения к полю текущего объекта используется переменная this)
        */
        //Подставляю объект someObject в поле someObject
        this.someObject = someObject;
    }


    //--------------------------Конец объявления конструкторов класса---------------------------------------------------

    /**
     * Объявление методов класса
     *
     *
     * Метод - набор действий, который будет выполнен при его вызове.
     * Как поля и конструкторы у методов есть такие же модификаторы доступа
     * При необходимости вернуть какой-нибудь объект внутри метода обязательно должна быть выполнена команда return,
     * возвращающая некоторое значение.
     *
     * Каждый метод обязан выглядеть как:
     * *модификатор доступа* *тип возвращаемого значения* *наименование метода* (*входящие переменные*) *выбрасываемые исключения*
     */

    //К примеру:

    /**
     * public synchronized strictfp - модификаторы доступа
     * @param returnFaster - входящий параметр, с которым можно оперировать внутри метода
     * @return - возвращаемое значение типа double
     * @throws IOException возможное выбрасываемое исключение (будет разобранно позже)
     */
    public synchronized strictfp double getSomeDoubleValue(boolean returnFaster) throws IOException {
        if(returnFaster){
            return 1d;
        }
        //Какая-то логика внутри класса
        return 0;
    };

    /**
     * Геттер поля someObject
     * Для автоматического геттера в IntellijIdea можно нажать alt+insert и выбрать пункт Getter
     * Методы, возвращающие какое-то значение в более ранних языках программирования назывались функциями
     * @return поле someObject
     */
    public Object getSomeObject() {
        return someObject;
    }

    /**
     * Сеттер поля someObject
     * Для автоматического сеттера в IntellijIdea можно нажать alt+insert и выбрать пункт Setter
     * Методы, ничего не возвращающие имеют возвращаемый тип *void* (void - пустота)
     * Методы, ничего не возвращающие, в более ранних языках программирования назывались процедурами
     * @param someObject
     */
    public void setSomeObject(Object someObject) {
        this.someObject = someObject;
    }

    /**
     * Метод toString, переопределенный у класса {@link Object#toString()}
     *
     * Для автоматического переопределения метода в IntellijIdea можно нажать alt+insert и выбрать пункт Override Methods
     *
     * аннотация @Override готорит о том, что метод был переопределен
     * она нужна только для того чтобы показать что метод переопределен
     * (Код скомпилируется и без нее, но код не скомпилируется, если поставить эту
     * аннотацию над методом, который на самом деле не был переопределен)
     */
    @Override
    public String toString(){
        return "Новое строковое обозначение этого класса";
    }

    //--------------------------Конец объявления методов класса---------------------------------------------------

    /**
     * Внутри класса могут быть и другие классы
     * У них точно так же могут быть модификаторы доступа
     *
     * С приватными классами можно работать внутри внешнего класса
     */

    private class InnerClass{
        private int field;
        private InnerClass(){

        };

        /**
         * Не смотря что поля класса ClassFoundation приватные, внутренний класс имеет к ним доступ
         */
        private void printSomeObject(){
            System.out.println(someObject);
        }
    }
}
